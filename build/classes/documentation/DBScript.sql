-- MySQL Script generated by MySQL Workbench
-- Tue Dec  1 09:57:58 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ParcialBonoDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ParcialBonoDB` DEFAULT CHARACTER SET utf8 ;
USE `ParcialBonoDB` ;

-- -----------------------------------------------------
-- Table `ParcialBonoDB`.`sensor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ParcialBonoDB`.`sensor` ;

CREATE TABLE IF NOT EXISTS `ParcialBonoDB`.`sensor` (
  `sen_id` INT NOT NULL AUTO_INCREMENT,
  `sen_set_type` VARCHAR(30) NOT NULL,
  `sen_name` VARCHAR(45) NOT NULL,
  `sen_location` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`sen_id`),
  INDEX `fk_sensor_sensorType_idx` (`sen_set_type` ASC) VISIBLE,
  CONSTRAINT `fk_sensor_sensorType`
    FOREIGN KEY (`sen_set_type`)
    REFERENCES `ParcialBonoDB`.`sensorType` (`set_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ParcialBonoDB`.`sensorHistory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ParcialBonoDB`.`sensorHistory` ;

CREATE TABLE IF NOT EXISTS `ParcialBonoDB`.`sensorHistory` (
  `his_id` INT NOT NULL AUTO_INCREMENT,
  `his_sen_id` INT NOT NULL,
  `his_value` DOUBLE NOT NULL,
  `his_datetime` DATETIME NOT NULL,
  `his_processing` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`his_id`),
  INDEX `fk_history_sensor1_idx` (`his_sen_id` ASC) VISIBLE,
  CONSTRAINT `fk_history_sensor1`
    FOREIGN KEY (`his_sen_id`)
    REFERENCES `ParcialBonoDB`.`sensor` (`sen_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ParcialBonoDB`.`sensorType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ParcialBonoDB`.`sensorType` ;

CREATE TABLE IF NOT EXISTS `ParcialBonoDB`.`sensorType` (
  `set_type` VARCHAR(30) NOT NULL,
  `set_minimum` DOUBLE NOT NULL,
  `set_maximum` DOUBLE NOT NULL,
  `set_average` DOUBLE NULL,
  `set_hoursNumber` INT NULL,
  PRIMARY KEY (`set_type`))
ENGINE = InnoDB;

USE `ParcialBonoDB` ;

-- -----------------------------------------------------
-- Placeholder table for view `ParcialBonoDB`.`getLastHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ParcialBonoDB`.`getLastHistory` (`"name"` INT, `"value"` INT, `"dateTime"` INT, `"location"` INT, `"processing"` INT);

-- -----------------------------------------------------
-- Placeholder table for view `ParcialBonoDB`.`getNames`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ParcialBonoDB`.`getNames` (`"id"` INT, `"name"` INT);

-- -----------------------------------------------------
-- procedure insertData
-- -----------------------------------------------------

USE `ParcialBonoDB`;
DROP procedure IF EXISTS `ParcialBonoDB`.`insertData`;

DELIMITER $$
USE `ParcialBonoDB`$$
CREATE PROCEDURE insertData(
	IN newName VARCHAR(40),
    IN newType VARCHAR(30),
    IN minimum DOUBLE,
    IN maximum DOUBLE,
    IN location VARCHAR(80),
    IN average DOUBLE,
    IN hoursNumber INT,
    IN newValue DOUBLE,
    IN newDateTime DATETIME,
    IN processing VARCHAR(30)
)
BEGIN
	DECLARE id INT;
    DECLARE fail INT;
    SET fail = 0;
    
	IF (SELECT COUNT(*) FROM sensortype WHERE set_type LIKE newType) = 0 THEN
		INSERT INTO sensorType VALUE (newType,minimum,maximum,average,hoursNumber);
	ELSE 
		SET fail = fail +1;
    END IF;
    
    IF (SELECT COUNT(*) FROM sensor WHERE sen_set_type LIKE newType AND sen_name LIKE newName AND sen_location LIKE location) = 0 THEN
		INSERT  INTO sensor (sen_set_type, sen_name, sen_location) VALUE (newType,newName,location);
	ELSE 
		SET fail = fail +1;
	END IF;
    
    SET id = (SELECT sen_id FROM sensor WHERE sen_set_type LIKE newType AND sen_name LIKE newName AND sen_location LIKE location);
    
    IF minimum<=newValue AND newValue<=maximum THEN
		IF (SELECT COUNT(*) FROM sensorHistory WHERE his_sen_id = id AND his_Value = newValue AND his_dateTime LIKE newDateTime AND his_processing LIKE processing) = 0 THEN
			INSERT INTO sensorHistory (his_sen_id, his_value,his_dateTime,his_processing) VALUE (
			id,newValue,newDateTime,processing);
		ELSE 
			SET fail = fail +1;
		END IF;
	ELSE 
		SET fail = fail +1;
    END IF;
    
    SELECT fail AS "error";
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getSensorInfo
-- -----------------------------------------------------

USE `ParcialBonoDB`;
DROP procedure IF EXISTS `ParcialBonoDB`.`getSensorInfo`;

DELIMITER $$
USE `ParcialBonoDB`$$
CREATE PROCEDURE getSensorInfo(
    IN id VARCHAR(80)
)
BEGIN
	SELECT sen_name AS "name", set_type AS "type", set_minimum AS "minimum",
    set_maximum AS "maximum", sen_location AS "location", set_average AS "average",
    set_hoursNumber AS "hoursNumber" FROM sensor LEFT JOIN sensorType ON sen_set_type = set_type
    WHERE id = sen_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `ParcialBonoDB`.`getLastHistory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ParcialBonoDB`.`getLastHistory`;
DROP VIEW IF EXISTS `ParcialBonoDB`.`getLastHistory` ;
USE `ParcialBonoDB`;
create  OR REPLACE view getLastHistory AS SELECT 
sen_name AS "name", his_value AS "value", his_datetime AS "dateTime", 
sen_location AS "location", his_processing AS "processing"
from(SELECT * FROM `sensorHistory` LEFT JOIN `sensor` ON his_sen_id = sen_id) AS s
LEFT JOIN `sensorType` ON sen_set_type LIKE set_type ORDER BY his_dateTime DESC limit 5;

-- -----------------------------------------------------
-- View `ParcialBonoDB`.`getNames`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ParcialBonoDB`.`getNames`;
DROP VIEW IF EXISTS `ParcialBonoDB`.`getNames` ;
USE `ParcialBonoDB`;
CREATE  OR REPLACE VIEW getNames AS SELECT sen_id AS "id", sen_name AS "name" FROM sensor;
SET SQL_MODE = '';
DROP USER IF EXISTS Admin;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'Admin' IDENTIFIED BY 'HTNT^256FbzNNO6eInk$';

GRANT ALL ON `ParcialBonoDB`.* TO 'Admin';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
